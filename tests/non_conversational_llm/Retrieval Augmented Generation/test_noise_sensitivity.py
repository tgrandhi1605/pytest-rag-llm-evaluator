import pytest

from ragas import SingleTurnSample
from ragas.metrics import NoiseSensitivity

from utils.LLMUtils import get_response_from_llm
from utils.TestDataUtils import load_data_sets


# Terminology:
# Noise Sensitivity: The degree to which a language model's performance is affected by the presence of noise in the input.
# user_input: question or query by the user
# reference: expected answer or ground truth
# retrieved_context: context retrieved from a knowledge base or database. Eg: Top K relevant documents
# response: The answer generated by the RAG based LLM
@pytest.mark.parametrize("generate_data_feed",
                         load_data_sets("NoiseSensitivityDataFeed.json"),
                         indirect=True)
@pytest.mark.asyncio
async def test_noise_sensitivity(llm_wrapper, generate_data_feed):
    # Initialize the NoiseSensitivity metric
    noise_sensitivity = NoiseSensitivity(llm_wrapper)
    # Metric to calculate the noise sensitivity score
    noise_sensitivity_score = await noise_sensitivity.single_turn_ascore(generate_data_feed)
    print("Noise Sensitivity Score: ", noise_sensitivity_score)
    assert noise_sensitivity_score >= 0.33


@pytest.fixture
def generate_data_feed(request):
    test_data = request.param
    responseFromRAGLLM = get_response_from_llm(test_data)
    # Extract the response and retrieved context
    retrieved_contexts = [doc["page_content"] for doc in responseFromRAGLLM["retrieved_docs"]]

    singleTurnSampleData = SingleTurnSample(
        user_input=test_data["question"],
        reference=test_data["reference"], # Ground truth or actual answer for a given question or user input
        response=responseFromRAGLLM["answer"],
        retrieved_contexts=retrieved_contexts,
    )
    return singleTurnSampleData
