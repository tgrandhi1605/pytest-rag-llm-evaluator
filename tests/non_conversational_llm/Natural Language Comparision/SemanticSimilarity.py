import pytest
from ragas import SingleTurnSample
from ragas.metrics import SemanticSimilarity

from utils.TestDataUtils import load_data_sets

# Terminology:
# Semantic Similarity: The degree to which two pieces of text convey similar meanings or concepts.
# reference: ground truth or actual answer for a given question or user input
# response: The answer generated by the LLM
@pytest.mark.parametrize("generate_data_feed",
                         load_data_sets("SemanticSimilarityDataFeed.json"),
                         indirect=True)
@pytest.mark.asyncio
async def test_symantic_similarity(llm_wrapper, generate_data_feed):
    # Initialize the SemanticSimilarity metric
    semantic_similarity = SemanticSimilarity(llm_wrapper)
    # Calculate the semantic similarity score
    semantic_similarity_score = await semantic_similarity.single_turn_ascore(generate_data_feed)
    print("Semantic similarity score", semantic_similarity_score)
    assert semantic_similarity_score >= 0.75

@pytest.fixture
def generate_data_feed(request):
    test_data = request.param

    # Create a SingleTurnSample object
    single_turn_sample = SingleTurnSample(
        reference=test_data["reference"], # Ground truth or actual answer for a given question or user input
        response=test_data["answer"]
    )
    return single_turn_sample
